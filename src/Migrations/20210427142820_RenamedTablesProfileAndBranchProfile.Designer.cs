// <auto-generated />
using System;
using DasTeamRevolution.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DasTeamRevolution.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210427142820_RenamedTablesProfileAndBranchProfile")]
    partial class RenamedTablesProfileAndBranchProfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdmin");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("NewPasswordRequiredOn")
                        .HasColumnType("date")
                        .HasColumnName("NewPasswordRequiredOn");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostalAddressId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("PostalAddressId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.BranchProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProfileId");

                    b.ToTable("BranchProfile");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.CustomerGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("HeaderId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("ParentId");

                    b.ToTable("CustomerGroup");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.CustomerHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("CustomerHeader");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PostalAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCodeISO")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("CountryCodeISO");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("PostalCity");

                    b.Property<string>("PostalName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PostalName");

                    b.Property<string>("PostalStreet")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PostalStreet");

                    b.Property<string>("PostalZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("PostalZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryCodeISO");

                    b.HasIndex("PostalZipCode", "PostalCity");

                    b.ToTable("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordCreation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("RecordCreation");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordModification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedOn");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("RecordModification");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostalAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Slug");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.VacancyState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateType")
                        .HasColumnType("int")
                        .HasColumnName("StateType");

                    b.Property<long?>("VacancyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyStates");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Branch", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.CustomerGroup", "Group")
                        .WithMany("Branches")
                        .HasForeignKey("GroupId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.Navigation("Creation");

                    b.Navigation("Group");

                    b.Navigation("LastModification");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.BranchProfile", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.CustomerGroup", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.CustomerHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.CustomerGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Creation");

                    b.Navigation("Header");

                    b.Navigation("LastModification");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordCreation", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordModification", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Vacancy", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Branch", "Branch")
                        .WithMany("Vacancies")
                        .HasForeignKey("BranchId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.Navigation("Branch");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.VacancyState", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.Vacancy", "Vacancy")
                        .WithMany("States")
                        .HasForeignKey("VacancyId");

                    b.Navigation("Creation");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Branch", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.CustomerGroup", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Vacancy", b =>
                {
                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
