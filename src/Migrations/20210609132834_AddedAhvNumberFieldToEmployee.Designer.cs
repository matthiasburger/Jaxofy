// <auto-generated />
using System;
using DasTeamRevolution.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DasTeamRevolution.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210609132834_AddedAhvNumberFieldToEmployee")]
    partial class AddedAhvNumberFieldToEmployee
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdmin");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("NewPasswordRequiredOn")
                        .HasColumnType("date")
                        .HasColumnName("NewPasswordRequiredOn");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentAs")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("AssignmentAs");

                    b.Property<string>("ContactName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ContactName");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("CostCenter");

                    b.Property<string>("Department")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Department");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<string>("Location")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Location");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notes");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrderId");

                    b.Property<long?>("ProposalId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProposalId");

                    b.Property<string>("Salary")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Salary");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProposalId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fax");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("GroupId");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<long?>("PostalAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("PostalAddressId");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("PostalAddressId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientEmployeeProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientId");

                    b.Property<long>("EmployeeProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeProfileId");

                    b.ToTable("ClientEmployeeProfile");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("HeaderId");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("HeaderId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("ParentId");

                    b.ToTable("ClientGroup");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ClientHeader");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientHeaderAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint")
                        .HasColumnName("AdminId");

                    b.Property<long>("ClientHeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientHeaderId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClientHeaderId");

                    b.ToTable("ClientHeaderAdmin");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientSupplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientId");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ClientSupplier");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationUserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ClientUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientUserSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientId");

                    b.Property<long>("ClientUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientUserId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientUserId");

                    b.ToTable("ClientUserSetting");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AhvNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("AhvNumber");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientId");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstName");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint")
                        .HasColumnName("Gender");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LastName");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mobile");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<long?>("PoolEmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("PoolEmployeeId");

                    b.Property<long?>("PostalAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("PostalAddressId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreationId");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("LastName");

                    b.HasIndex("PoolEmployeeId");

                    b.HasIndex("PostalAddressId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.EmployeeProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("EmployeeProfile");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.JobProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientSupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientSupplierId");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Factor");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientSupplierId");

                    b.ToTable("JobProfiles");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientId");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PoolEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstName");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("LastName");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mobile");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("LastName");

                    b.HasIndex("SupplierId");

                    b.ToTable("PoolEmployee");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PoolEmployeeDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("DocumentBytes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("DocumentBytes");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DocumentName");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PoolEmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("PoolEmployeeId");

                    b.Property<long?>("ProposalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("PoolEmployeeId");

                    b.HasIndex("ProposalId");

                    b.ToTable("PoolEmployeeDocuments");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PostalAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCodeISO")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("CountryCodeISO");

                    b.Property<string>("PostalCity")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("PostalCity");

                    b.Property<string>("PostalName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PostalName");

                    b.Property<string>("PostalStreet")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("PostalStreet");

                    b.Property<string>("PostalZipCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("PostalZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryCodeISO");

                    b.HasIndex("PostalZipCode", "PostalCity");

                    b.ToTable("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Proposal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssignmentId");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EmployeeId");

                    b.Property<long?>("SupplierUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierUserId");

                    b.Property<long?>("VacancyId")
                        .HasColumnType("bigint")
                        .HasColumnName("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupplierUserId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Proposal");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ProposalDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("DocumentBytes")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("DocumentBytes");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DocumentName");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProposalId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProposalId");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalDocument");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ProposalStateHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<long?>("ProposalId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProposalId");

                    b.Property<int>("StateType")
                        .HasColumnType("int")
                        .HasColumnName("StateType");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalStateHistory");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssignmentId");

                    b.Property<long?>("ClientUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordCreation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedById");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("RecordCreation");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordModification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedById");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedOn");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("RecordModification");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Fax");

                    b.Property<long?>("HeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("HeaderId");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<long?>("PostalAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("PostalAddressId");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("HeaderId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("PostalAddressId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.ToTable("SupplierHeader");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApplicationUserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("SupplierUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierUserSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierId");

                    b.Property<long>("SupplierUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierUserId");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierUserId");

                    b.ToTable("SupplierUserSetting");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.TimeRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastModificationId");

                    b.ToTable("TimeRecord");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.TimeRecordStateHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateType")
                        .HasColumnType("int")
                        .HasColumnName("StateType");

                    b.Property<long?>("TimeRecordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("TimeRecordId");

                    b.ToTable("TimeRecordStateHistory");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("ClientId");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("CreationId");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Deadline");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<long?>("JobProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("JobProfileId");

                    b.Property<long?>("LastModificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("LastModificationId");

                    b.Property<long?>("PostalAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("PostalAddressId");

                    b.Property<int?>("RequiredAmountEmployees")
                        .HasColumnType("int")
                        .HasColumnName("RequiredAmountEmployees");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Slug");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreationId");

                    b.HasIndex("JobProfileId");

                    b.HasIndex("LastModificationId");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.VacancyStateHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateType")
                        .HasColumnType("int")
                        .HasColumnName("StateType");

                    b.Property<long?>("VacancyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyStateHistory");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Assignment", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Employee", "Employee")
                        .WithMany("Assignments")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DasTeamRevolution.Data.Models.Order", "Order")
                        .WithMany("Assignments")
                        .HasForeignKey("OrderId");

                    b.HasOne("DasTeamRevolution.Data.Models.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId");

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Client", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.ClientGroup", "Group")
                        .WithMany("Clients")
                        .HasForeignKey("GroupId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.Navigation("Creation");

                    b.Navigation("Group");

                    b.Navigation("LastModification");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientEmployeeProfile", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.EmployeeProfile", "EmployeeProfile")
                        .WithMany()
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("EmployeeProfile");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientGroup", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.ClientHeader", "Header")
                        .WithMany("Groups")
                        .HasForeignKey("HeaderId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.ClientGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Creation");

                    b.Navigation("Header");

                    b.Navigation("LastModification");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientHeaderAdmin", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.ClientHeader", "ClientHeader")
                        .WithMany()
                        .HasForeignKey("ClientHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("ClientHeader");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientSupplier", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientUser", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("ClientUser")
                        .HasForeignKey("DasTeamRevolution.Data.Models.ClientUser", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientUserSetting", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Client", "Client")
                        .WithMany("ClientUserSettings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.ClientUser", "ClientUser")
                        .WithMany("ClientUserSettings")
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Employee", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PoolEmployee", "PoolEmployee")
                        .WithMany()
                        .HasForeignKey("PoolEmployeeId");

                    b.HasOne("DasTeamRevolution.Data.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.Navigation("Client");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");

                    b.Navigation("PoolEmployee");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.JobProfile", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ClientSupplier", "ClientSupplier")
                        .WithMany("JobProfiles")
                        .HasForeignKey("ClientSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientSupplier");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Order", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.Navigation("Client");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PoolEmployee", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.Supplier", "Supplier")
                        .WithMany("PoolEmployees")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creation");

                    b.Navigation("LastModification");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PoolEmployeeDocument", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PoolEmployee", "PoolEmployee")
                        .WithMany("Documents")
                        .HasForeignKey("PoolEmployeeId");

                    b.HasOne("DasTeamRevolution.Data.Models.Proposal", null)
                        .WithMany("PoolEmployeeDocuments")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");

                    b.Navigation("PoolEmployee");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Proposal", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId");

                    b.HasOne("DasTeamRevolution.Data.Models.Employee", "Employee")
                        .WithMany("Proposals")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DasTeamRevolution.Data.Models.SupplierUser", "SupplierUser")
                        .WithMany("Proposals")
                        .HasForeignKey("SupplierUserId");

                    b.HasOne("DasTeamRevolution.Data.Models.Vacancy", "Vacancy")
                        .WithMany("Proposals")
                        .HasForeignKey("VacancyId");

                    b.Navigation("Assignment");

                    b.Navigation("Employee");

                    b.Navigation("SupplierUser");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ProposalDocument", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.Proposal", "Proposal")
                        .WithMany("ProposalDocuments")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ProposalStateHistory", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.Proposal", "Proposal")
                        .WithMany("States")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Creation");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Rating", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Assignment", "Assignment")
                        .WithOne("Rating")
                        .HasForeignKey("DasTeamRevolution.Data.Models.Rating", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.ClientUser", "ClientUser")
                        .WithMany("Ratings")
                        .HasForeignKey("ClientUserId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.Navigation("Assignment");

                    b.Navigation("ClientUser");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordCreation", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.RecordModification", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Supplier", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.SupplierHeader", "Header")
                        .WithMany("Groups")
                        .HasForeignKey("HeaderId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.Navigation("Creation");

                    b.Navigation("Header");

                    b.Navigation("LastModification");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierHeader", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierUser", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("SupplierUser")
                        .HasForeignKey("DasTeamRevolution.Data.Models.SupplierUser", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierUserSetting", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Supplier", "Supplier")
                        .WithMany("SupplierUserSettings")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DasTeamRevolution.Data.Models.SupplierUser", "SupplierUser")
                        .WithMany("SupplierUserSettings")
                        .HasForeignKey("SupplierUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("SupplierUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.TimeRecord", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Assignment", "Assignment")
                        .WithMany("TimeRecords")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("DasTeamRevolution.Data.Models.ClientUser", "ClientUser")
                        .WithMany("TimeRecords")
                        .HasForeignKey("ClientUserId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.Navigation("Assignment");

                    b.Navigation("ClientUser");

                    b.Navigation("Creation");

                    b.Navigation("LastModification");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.TimeRecordStateHistory", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.TimeRecord", "TimeRecord")
                        .WithMany("States")
                        .HasForeignKey("TimeRecordId");

                    b.Navigation("Creation");

                    b.Navigation("TimeRecord");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Vacancy", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.Client", "Client")
                        .WithMany("Vacancies")
                        .HasForeignKey("ClientId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.JobProfile", "JobProfile")
                        .WithMany()
                        .HasForeignKey("JobProfileId");

                    b.HasOne("DasTeamRevolution.Data.Models.RecordModification", "LastModification")
                        .WithMany()
                        .HasForeignKey("LastModificationId");

                    b.HasOne("DasTeamRevolution.Data.Models.PostalAddress", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.Navigation("Client");

                    b.Navigation("Creation");

                    b.Navigation("JobProfile");

                    b.Navigation("LastModification");

                    b.Navigation("PostalAddress");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.VacancyStateHistory", b =>
                {
                    b.HasOne("DasTeamRevolution.Data.Models.RecordCreation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DasTeamRevolution.Data.Models.Vacancy", "Vacancy")
                        .WithMany("States")
                        .HasForeignKey("VacancyId");

                    b.Navigation("Creation");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ClientUser");

                    b.Navigation("SupplierUser");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Assignment", b =>
                {
                    b.Navigation("Rating");

                    b.Navigation("TimeRecords");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Client", b =>
                {
                    b.Navigation("ClientUserSettings");

                    b.Navigation("Orders");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientGroup", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientHeader", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientSupplier", b =>
                {
                    b.Navigation("JobProfiles");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.ClientUser", b =>
                {
                    b.Navigation("ClientUserSettings");

                    b.Navigation("Ratings");

                    b.Navigation("TimeRecords");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Employee", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Order", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.PoolEmployee", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Proposal", b =>
                {
                    b.Navigation("PoolEmployeeDocuments");

                    b.Navigation("ProposalDocuments");

                    b.Navigation("States");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Supplier", b =>
                {
                    b.Navigation("PoolEmployees");

                    b.Navigation("SupplierUserSettings");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierHeader", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.SupplierUser", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("SupplierUserSettings");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.TimeRecord", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("DasTeamRevolution.Data.Models.Vacancy", b =>
                {
                    b.Navigation("Proposals");

                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
